// const { Grammar } = require("./earley-oop");

// LekagulSensorData.csv
const pred_length = 2;
const expr_length = 2;

function updateAttr(){ 
    console.log(this.files[0]);
    var result;
    Papa.parse(this.files[0], {
        complete: function(results) {
            // console.log("Finished:", results.data);
            attr = results.data[0];
            $("#attr").append("attr -> ");
            for(var i in attr){
                if(i == attr.length-1){
                    $("#attr").append(attr[i]);
                }
                else{
                    $("#attr").append(attr[i] + " | ");
                }
            }
        }
    });
}

function is_hypo(tokenStream, grammar){
    var result = true;
    if(tokenStream == null){
        result = false;
    }
    for(var i in tokenStream){
        if(grammar[tokenStream[i]] != null){
            result = false;
        }
    }

    return result;
}

function grm_traverse(grammar, start){
    // return all possible strings which can be generated by grammar
    const all_hypo = [];
    const worklist =grammar[start];
    // while(worklist.length != 0){
    //     console.log(worklist);
    //     for(var i in worklist[0]){
    //         for(var j in worklist[0][i]){
    //             worklist.push(grammar[worklist[0][i][j]]);
    //         }
    //     }
    //     var popped_str = worklist.shift();
    //     if(is_hypo(popped_str, grammar)){
    //         all_hypo.push(popped_str);
    //         console.log(all_hypo);
    //     }
    //     // console.log(worklist);
    // }
    for(var i in worklist[0]){
        for(var j in worklist[0][i]){
            worklist.push(grammar[worklist[0][i][j]]);
        }
    }
    var popped_str = worklist.shift();
    if(is_hypo(popped_str, grammar)){
        all_hypo.push(popped_str);
        console.log(all_hypo);
    }
    console.log(worklist);

    return all_hypo;
}

$(document).ready(function(){
    document.getElementById("input").addEventListener("change", updateAttr, false);

    const p = document.getElementById('testNTS').textContent 
                + document.getElementById('testNS').textContent;
    rules = p.trim().split('\n');
    var grammar = new tinynlp.Grammar(rules);
    grammar = grammar.lhsToRhsList;

    console.log(grammar);
    all_hypo = grm_traverse(grammar, 'root');
    console.log(all_hypo);
});